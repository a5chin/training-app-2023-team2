// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package controller is a generated GoMock package.
package controller

import (
	context "context"
	entity "myapp/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHelloWorldUseCase is a mock of HelloWorldUseCase interface.
type MockHelloWorldUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockHelloWorldUseCaseMockRecorder
}

// MockHelloWorldUseCaseMockRecorder is the mock recorder for MockHelloWorldUseCase.
type MockHelloWorldUseCaseMockRecorder struct {
	mock *MockHelloWorldUseCase
}

// NewMockHelloWorldUseCase creates a new mock instance.
func NewMockHelloWorldUseCase(ctrl *gomock.Controller) *MockHelloWorldUseCase {
	mock := &MockHelloWorldUseCase{ctrl: ctrl}
	mock.recorder = &MockHelloWorldUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelloWorldUseCase) EXPECT() *MockHelloWorldUseCaseMockRecorder {
	return m.recorder
}

// GetHelloWorld mocks base method.
func (m *MockHelloWorldUseCase) GetHelloWorld(ctx context.Context, lang string) (*entity.HelloWorld, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHelloWorld", ctx, lang)
	ret0, _ := ret[0].(*entity.HelloWorld)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHelloWorld indicates an expected call of GetHelloWorld.
func (mr *MockHelloWorldUseCaseMockRecorder) GetHelloWorld(ctx, lang interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHelloWorld", reflect.TypeOf((*MockHelloWorldUseCase)(nil).GetHelloWorld), ctx, lang)
}

// MockPostUseCase is a mock of PostUseCase interface.
type MockPostUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockPostUseCaseMockRecorder
}

// MockPostUseCaseMockRecorder is the mock recorder for MockPostUseCase.
type MockPostUseCaseMockRecorder struct {
	mock *MockPostUseCase
}

// NewMockPostUseCase creates a new mock instance.
func NewMockPostUseCase(ctrl *gomock.Controller) *MockPostUseCase {
	mock := &MockPostUseCase{ctrl: ctrl}
	mock.recorder = &MockPostUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostUseCase) EXPECT() *MockPostUseCaseMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockPostUseCase) CreatePost(ctx context.Context, uid, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", ctx, uid, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostUseCaseMockRecorder) CreatePost(ctx, uid, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostUseCase)(nil).CreatePost), ctx, uid, body)
}

// CreateReply mocks base method.
func (m *MockPostUseCase) CreateReply(ctx context.Context, parentID, uid, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReply", ctx, parentID, uid, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReply indicates an expected call of CreateReply.
func (mr *MockPostUseCaseMockRecorder) CreateReply(ctx, parentID, uid, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReply", reflect.TypeOf((*MockPostUseCase)(nil).CreateReply), ctx, parentID, uid, body)
}

// DeletePost mocks base method.
func (m *MockPostUseCase) DeletePost(ctx context.Context, uid, pid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", ctx, uid, pid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockPostUseCaseMockRecorder) DeletePost(ctx, uid, pid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostUseCase)(nil).DeletePost), ctx, uid, pid)
}

// GetPostByID mocks base method.
func (m *MockPostUseCase) GetPostByID(ctx context.Context, loginUserID *string, pid string) (*entity.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostByID", ctx, loginUserID, pid)
	ret0, _ := ret[0].(*entity.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostByID indicates an expected call of GetPostByID.
func (mr *MockPostUseCaseMockRecorder) GetPostByID(ctx, loginUserID, pid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostByID", reflect.TypeOf((*MockPostUseCase)(nil).GetPostByID), ctx, loginUserID, pid)
}

// GetPosts mocks base method.
func (m *MockPostUseCase) GetPosts(ctx context.Context, loginUserID *string, limit, offset *int) ([]*entity.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosts", ctx, loginUserID, limit, offset)
	ret0, _ := ret[0].([]*entity.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosts indicates an expected call of GetPosts.
func (mr *MockPostUseCaseMockRecorder) GetPosts(ctx, loginUserID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosts", reflect.TypeOf((*MockPostUseCase)(nil).GetPosts), ctx, loginUserID, limit, offset)
}

// GetReplies mocks base method.
func (m *MockPostUseCase) GetReplies(ctx context.Context, loginUserID *string, pid string, limit, offset *int) ([]*entity.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplies", ctx, loginUserID, pid, limit, offset)
	ret0, _ := ret[0].([]*entity.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplies indicates an expected call of GetReplies.
func (mr *MockPostUseCaseMockRecorder) GetReplies(ctx, loginUserID, pid, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplies", reflect.TypeOf((*MockPostUseCase)(nil).GetReplies), ctx, loginUserID, pid, limit, offset)
}

// MockFavoriteUseCase is a mock of FavoriteUseCase interface.
type MockFavoriteUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockFavoriteUseCaseMockRecorder
}

// MockFavoriteUseCaseMockRecorder is the mock recorder for MockFavoriteUseCase.
type MockFavoriteUseCaseMockRecorder struct {
	mock *MockFavoriteUseCase
}

// NewMockFavoriteUseCase creates a new mock instance.
func NewMockFavoriteUseCase(ctrl *gomock.Controller) *MockFavoriteUseCase {
	mock := &MockFavoriteUseCase{ctrl: ctrl}
	mock.recorder = &MockFavoriteUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFavoriteUseCase) EXPECT() *MockFavoriteUseCaseMockRecorder {
	return m.recorder
}

// CreateFavorite mocks base method.
func (m *MockFavoriteUseCase) CreateFavorite(ctx context.Context, pid, uid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFavorite", ctx, pid, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFavorite indicates an expected call of CreateFavorite.
func (mr *MockFavoriteUseCaseMockRecorder) CreateFavorite(ctx, pid, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFavorite", reflect.TypeOf((*MockFavoriteUseCase)(nil).CreateFavorite), ctx, pid, uid)
}

// DeleteFavorite mocks base method.
func (m *MockFavoriteUseCase) DeleteFavorite(ctx context.Context, loginUserID, pid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFavorite", ctx, loginUserID, pid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFavorite indicates an expected call of DeleteFavorite.
func (mr *MockFavoriteUseCaseMockRecorder) DeleteFavorite(ctx, loginUserID, pid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFavorite", reflect.TypeOf((*MockFavoriteUseCase)(nil).DeleteFavorite), ctx, loginUserID, pid)
}

// MockUserUseCase is a mock of UserUseCase interface.
type MockUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseMockRecorder
}

// MockUserUseCaseMockRecorder is the mock recorder for MockUserUseCase.
type MockUserUseCaseMockRecorder struct {
	mock *MockUserUseCase
}

// NewMockUserUseCase creates a new mock instance.
func NewMockUserUseCase(ctrl *gomock.Controller) *MockUserUseCase {
	mock := &MockUserUseCase{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUseCase) EXPECT() *MockUserUseCaseMockRecorder {
	return m.recorder
}

// GetUserByID mocks base method.
func (m *MockUserUseCase) GetUserByID(ctx context.Context, userID string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userID)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserUseCaseMockRecorder) GetUserByID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserUseCase)(nil).GetUserByID), ctx, userID)
}

// GetUserFromToken mocks base method.
func (m *MockUserUseCase) GetUserFromToken(ctx context.Context, token string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFromToken", ctx, token)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFromToken indicates an expected call of GetUserFromToken.
func (mr *MockUserUseCaseMockRecorder) GetUserFromToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFromToken", reflect.TypeOf((*MockUserUseCase)(nil).GetUserFromToken), ctx, token)
}

// GetUsers mocks base method.
func (m *MockUserUseCase) GetUsers(ctx context.Context) ([]*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx)
	ret0, _ := ret[0].([]*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUserUseCaseMockRecorder) GetUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUserUseCase)(nil).GetUsers), ctx)
}

// SignInUser mocks base method.
func (m *MockUserUseCase) SignInUser(ctx context.Context, email, password string) (*entity.User, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignInUser", ctx, email, password)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignInUser indicates an expected call of SignInUser.
func (mr *MockUserUseCaseMockRecorder) SignInUser(ctx, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignInUser", reflect.TypeOf((*MockUserUseCase)(nil).SignInUser), ctx, email, password)
}

// SignUpUser mocks base method.
func (m *MockUserUseCase) SignUpUser(ctx context.Context, name, email, password string) (*entity.User, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUpUser", ctx, name, email, password)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignUpUser indicates an expected call of SignUpUser.
func (mr *MockUserUseCaseMockRecorder) SignUpUser(ctx, name, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUpUser", reflect.TypeOf((*MockUserUseCase)(nil).SignUpUser), ctx, name, email, password)
}

// UpdateProfile mocks base method.
func (m *MockUserUseCase) UpdateProfile(ctx context.Context, userID, profile string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", ctx, userID, profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockUserUseCaseMockRecorder) UpdateProfile(ctx, userID, profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockUserUseCase)(nil).UpdateProfile), ctx, userID, profile)
}
